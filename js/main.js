import { GameState } from './modules/GameState.js';
import { tutorialSystem, initTutorialSystem } from './tutorial.js';
import { getRarityIcon, getRarityColor, getRarityDisplayName } from './modules/RarityUtils.js';
import { getMusicManager } from './modules/MusicManager.js';



// Instance globale du jeu
let gameState = new GameState();



// Rendre le gameState accessible globalement pour les notifications
window.gameState = gameState;




// ===== FONCTIONS DE DEBUG =====
// Fonction pour ajouter de l'or facilement
window.addGold = function(amount = 100) {
    if (gameState) {
        gameState.addGold(amount);
        gameState.notificationManager.showGoldAdded(amount);
    } else {
        console.error('gameState non disponible');
    }
};

// Fonction pour d√©finir l'or directement
window.setGold = function(amount) {
    if (gameState) {
        gameState.gold = amount;
        gameState.updateUI();
        gameState.notificationManager.showGoldSet(amount);
    } else {
        console.error('gameState non disponible');
    }
};

// Fonction pour afficher les informations de debug
window.debugInfo = function() {
    if (gameState) {
        // Fonction de debug silencieuse
    } else {
        console.error('gameState non disponible');
    }
};

// Fonction pour rafra√Æchir le magasin gratuitement
window.refreshShop = function() {
    if (gameState && gameState.shopManager) {
        gameState.shopManager.currentShopItems = null;
        gameState.shopManager.currentShopPurchasedBonuses = [];
        gameState.shopManager.currentShopPurchasedUnits = [];
        gameState.shopManager.currentShopPurchasedConsumables = [];
        gameState.shopManager.shopRefreshCount = 0;
        gameState.shopManager.shopRefreshCost = 10;
        gameState.shopManager.updatePreCombatShop(gameState);
        gameState.notificationManager.showShopRefreshed();
    } else {
        console.error('gameState ou shopManager non disponible');
    }
};

// Fonction pour d√©bloquer tous les bonus
window.unlockAllBonuses = function() {
    if (gameState) {
        const bonusDescriptions = gameState.getBonusDescriptions();
        Object.keys(bonusDescriptions).forEach(bonusId => {
            if (!gameState.unlockedBonuses.includes(bonusId)) {
                gameState.unlockBonus(bonusId);
            }
        });
        gameState.notificationManager.showAllBonusesUnlocked();
    } else {
        console.error('gameState non disponible');
    }
};



// Gestion des √©crans
function showScreen(screenId) {
    // Cacher tous les √©crans
    const screens = document.querySelectorAll('.screen');
    
    screens.forEach(screen => {
        screen.classList.remove('active');
    });
    
    // Afficher l'√©cran demand√©
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
    } else {
        console.error(`√âcran ${screenId} non trouv√© !`);
    }
}

// Gestion des modals
function showModal(modalId) {
    const modal = document.getElementById(modalId);
    const overlay = document.getElementById('modal-overlay');
    
    if (modal) {
        modal.classList.add('active');
    }
    if (overlay) {
        overlay.style.display = 'block';
    }
}

function hideModal(modalId) {
    const modal = document.getElementById(modalId);
    const overlay = document.getElementById('modal-overlay');
    
    // Ne jamais fermer la modal de combat
    if (modalId === 'combat-modal') {
        console.log('Tentative de fermeture de la modal de combat bloqu√©e');
        return;
    }
    
    if (modal) {
        modal.classList.remove('active');
    }
    if (overlay) {
        overlay.style.display = 'none';
    }
}

// Rendre les fonctions de modal accessibles globalement
window.showModal = showModal;
window.hideModal = hideModal;







// Initialisation du tutoriel
function initTutorial() {
    console.log('Initialisation du tutoriel...');
    console.log('tutorialSystem disponible:', !!tutorialSystem);
    
    // Utiliser le syst√®me de tutoriel complet depuis tutorial.js
    if (tutorialSystem) {
        console.log('Utilisation du syst√®me de tutoriel complet');
        initTutorialSystem(hideModal);
    } else {
        // Fallback si le syst√®me de tutoriel n'est pas charg√©
        const content = document.getElementById('tutorial-content');
        if (!content) return;
        
        content.innerHTML = `
            <h4 style="color: #2d3436; margin-bottom: 15px;">Bienvenue dans le Gestionnaire de Guilde !</h4>
            <p>Vous √™tes le gestionnaire d'une guilde d'aventuriers dans un univers m√©di√©val. 
            Votre objectif est de recruter des troupes, les envoyer au combat, et faire progresser 
            votre guilde jusqu'au rang S.</p>
            
            <p><strong>Objectifs :</strong></p>
            <ul>
                <li>Recruter des unit√©s vari√©es (corps √† corps, distance, magique)</li>
                <li>Former des √©quipes avec des synergies</li>
                <li>Combattre des ennemis pour gagner de l'or et de la r√©putation</li>
                <li>Am√©liorer votre guilde via le magasin</li>
                <li>Atteindre le rang S en affrontant des boss</li>
            </ul>
        `;
        
        // Navigation du tutoriel
        document.getElementById('tutorial-next').addEventListener('click', () => {
            hideModal('tutorial-modal');
            gameState.notificationManager.showTutorialCompleted();
        });
        
        document.getElementById('tutorial-prev').addEventListener('click', () => {
            hideModal('tutorial-modal');
        });
    }
}

// Charger le contenu de la modal beta test
async function loadBetaTestContent() {
    try {
        const response = await fetch('betatest.txt');
        const content = await response.text();
        const betaContent = document.getElementById('beta-test-content');
        if (betaContent) {
            betaContent.innerHTML = content;
        }
    } catch (error) {
        console.error('Erreur lors du chargement du contenu beta test:', error);
        // Fallback si le fichier n'est pas trouv√©
        const betaContent = document.getElementById('beta-test-content');
        if (betaContent) {
            betaContent.innerHTML = `
üéÆ BETA TEST - GuildMaster

Bonjour √† tous !

Merci de participer √† cette phase de test de GuildMaster ! Votre aide est pr√©cieuse pour am√©liorer le jeu avant sa sortie officielle.

‚ö†Ô∏è IMPORTANT - Phase de test en cours

Le jeu est actuellement en version b√™ta non √©quilibr√©e. Cela signifie que :
- Les m√©caniques de combat peuvent √™tre d√©s√©quilibr√©es
- Certaines unit√©s peuvent √™tre trop fortes ou trop faibles
- L'√©conomie du jeu n'est pas encore optimis√©e
- Des bugs peuvent survenir

üíæ Syst√®me de sauvegarde

Votre progression est sauvegard√©e automatiquement dans votre navigateur. IMPORTANT :
- Ne videz pas les donn√©es de navigation (cache, cookies, etc.)
- Ne passez pas en navigation priv√©e
- Utilisez le m√™me navigateur pour continuer votre partie
- Le bouton "Sauvegarder" permet de forcer une sauvegarde manuelle

ü§ê Confidentialit√©

Pour pr√©server l'effet de surprise pour les autres joueurs, merci de ne pas partager l'URL du jeu en dehors de ce groupe de testeurs. Gardons la magie intacte pour le lancement !

üí¨ Vos retours sont essentiels

Je suis ouvert √† tous vos retours :
- Bugs rencontr√©s
- Suggestions d'am√©lioration
- √âquilibrage des unit√©s/synergies
- Interface utilisateur
- Nouvelles fonctionnalit√©s
- Tout ce qui vous passe par la t√™te !

N'h√©sitez pas √† me faire part de vos impressions, m√™me les plus d√©taill√©es. Chaque retour compte pour faire de GuildMaster le meilleur jeu possible !

üéØ Objectif de cette b√™ta

Tester en profondeur toutes les m√©caniques et identifier les points d'am√©lioration avant la version finale.

Merci encore pour votre participation ! 

√Ä vos claviers, testeurs ! üöÄ
            `;
        }
    }
}

// Initialisation du jeu
function initGame() {
    // Initialiser le gestionnaire de musique
    const musicManager = getMusicManager();
    
    // Charger le contenu de la modal beta test
    loadBetaTestContent();
    
    // Afficher la modal beta test au chargement (seulement si pas d√©j√† vue)
    if (!localStorage.getItem('betaTestSeen')) {
        setTimeout(() => {
            showModal('beta-test-modal');
        }, 500);
    }
    
    // S'assurer que l'animation de victoire est masqu√©e au chargement
    const victoryAnimation = document.getElementById('victory-animation');
    if (victoryAnimation) {
        victoryAnimation.style.display = 'none';
        victoryAnimation.style.opacity = '0';
    }
    
    // √âv√©nements des boutons principaux
    const newGameBtn = document.getElementById('new-game-btn');
    const loadGameBtn = document.getElementById('load-game-btn');
    const tutorialBtn = document.getElementById('tutorial-btn');
    const simulationBtn = document.getElementById('simulation-btn');
    
    if (newGameBtn) {
        newGameBtn.addEventListener('click', () => {
            showModal('new-game-modal');
            
            // Focus sur le champ de nom de guilde
            const newGuildNameInput = document.getElementById('new-guild-name');
            if (newGuildNameInput) {
                newGuildNameInput.focus();
                newGuildNameInput.select();
            }
        });
    }
    
    if (loadGameBtn) {
        loadGameBtn.addEventListener('click', () => {
            if (gameState.load()) {
                showScreen('game-screen');
                gameState.notificationManager.showGameLoaded();
            } else {
                gameState.notificationManager.showNoSaveFound();
            }
        });
    }
    
    if (tutorialBtn) {
        tutorialBtn.addEventListener('click', () => {
            showModal('tutorial-modal');
            initTutorial();
        });
    }



    if (simulationBtn) {
        simulationBtn.addEventListener('click', () => {
            simulationUI.show();
        });
    }

    // √âv√©nements du jeu
    const startCombatBtn = document.getElementById('start-combat-btn');
    const sellBonusesBtn = document.getElementById('sell-bonuses-btn');
    const viewTroopsBtn = document.getElementById('view-troops-btn');
    const saveBtn = document.getElementById('save-btn');
    const menuBtn = document.getElementById('menu-btn');
    
    if (startCombatBtn) {
        startCombatBtn.addEventListener('click', () => {
            // Si pas de combat en cours, en d√©marrer un nouveau
            if (!gameState.currentCombat.isActive) {
                gameState.startNewCombat();
                
                return;
            }
            
            // Si combat en cours, ex√©cuter un tour
            if (gameState.selectedTroops.length === 0) {
                gameState.notificationManager.showActionRequired('S√©lectionnez des troupes pour attaquer !');
                return;
            }
            
            gameState.executeCombatTurn();
            
        });
    }
    
    if (viewTroopsBtn) {
        viewTroopsBtn.addEventListener('click', () => {
            gameState.showAllTroops();
        });
    }
    
    if (saveBtn) {
        saveBtn.addEventListener('click', () => {
            gameState.save();
        });
    }
    
    if (sellBonusesBtn) {
        sellBonusesBtn.addEventListener('click', () => {
            if (gameState && gameState.shopManager) {
                gameState.shopManager.openSellBonusesModal(gameState);
            } else {
                console.error('gameState ou shopManager non disponible');
            }
        });
    }
    
    if (menuBtn) {
        menuBtn.addEventListener('click', () => {
            showScreen('title-screen');
        });
    }

    // Fermeture des modals
    document.querySelectorAll('.close-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const modal = e.target.closest('.modal');
            if (modal) {
                // Ne jamais fermer la modal de combat
                if (modal.id === 'combat-modal') {
                    return;
                }
                
                hideModal(modal.id);
                // Fermer sp√©cifiquement la modal des troupes
                if (modal.id === 'troops-modal') {
                    modal.style.display = 'none';
                }
            }
        });
    });

    const modalOverlay = document.getElementById('modal-overlay');
    if (modalOverlay) {
        modalOverlay.addEventListener('click', () => {
            document.querySelectorAll('.modal.active').forEach(modal => {
                // Ne jamais fermer la modal de combat avec l'overlay
                if (modal.id === 'combat-modal') {
                    return;
                }
                hideModal(modal.id);
            });
        });
    }

    // √âcouteur d'√©v√©nement pour le tri des unit√©s
    window.addEventListener('troopsSortChanged', () => {
        if (gameState && gameState.unitSorter) {
            gameState.updateTroopsUI();
        }
    });

    // Fermeture des modals avec la touche √âchap
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            // V√©rifier si un combat est en cours
            const isCombatActive = gameState && gameState.currentCombat && gameState.currentCombat.isActive;
            
            // Fermer toutes les modals actives (statiques et dynamiques) sauf la modal de combat
            document.querySelectorAll('.modal.active, .modal[style*="display: block"]').forEach(modal => {
                // Ne jamais fermer la modal de combat avec √âchap
                if (modal.id === 'combat-modal') {
                    return;
                }
                
                hideModal(modal.id);
                // Fermer sp√©cifiquement la modal des troupes
                if (modal.id === 'troops-modal') {
                    modal.style.display = 'none';
                }
                // Fermer les modals dynamiques
                if (modal.id === 'synergy-upgrade-modal' || modal.id === 'transform-confirmation-modal' || modal.id === 'game-summary-modal') {
                    modal.remove();
                }
            });
            
            // Fermer l'animation de combat seulement si elle n'est pas en cours d'animation
            const combatAnimation = document.getElementById('combat-animation-container');
            if (combatAnimation && combatAnimation.style.display === 'flex') {
                // Ne jamais fermer l'animation de combat si un combat est en cours
                if (isCombatActive) {
                    return;
                }
                
                // V√©rifier si l'animation est en cours en regardant si le bouton de fermeture est visible
                const closeButton = combatAnimation.querySelector('#close-combat-animation');
                if (closeButton && closeButton.style.display !== 'none' && closeButton.style.visibility !== 'hidden' && !isCombatActive) {
                    // L'animation peut √™tre ferm√©e (bouton visible = animation termin√©e ET pas de combat actif)
                    combatAnimation.style.display = 'none';
                }
                // Si le bouton n'est pas visible ou si un combat est actif, l'animation ne doit pas √™tre ferm√©e
            }
            
            // Fermer l'animation de victoire si elle est active
            const victoryAnimation = document.getElementById('victory-animation');
            if (victoryAnimation && victoryAnimation.style.display === 'block') {
                victoryAnimation.style.display = 'none';
            }
            
            // Fermer l'overlay de transformation s'il est actif
            const transformOverlay = document.getElementById('transform-overlay');
            if (transformOverlay) {
                transformOverlay.remove();
            }
            
            // Fermer la notification de transformation si elle est active
            const transformNotification = document.getElementById('transform-notification');
            if (transformNotification) {
                transformNotification.remove();
            }
            
            // R√©initialiser le mode transformation si actif
            if (gameState && gameState.consumableManager) {
                gameState.consumableManager.deactivateTransformMode();
            }
        }
    });

    // √âv√©nement pour le nom de guilde modifiable
    const guildNameInput = document.getElementById('guild-name-input');
    if (guildNameInput) {
        guildNameInput.addEventListener('blur', () => {
            gameState.updateGuildName(guildNameInput.value);
        });
        
        guildNameInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                guildNameInput.blur();
            }
        });
    }
    
    // √âv√©nements pour la modal nouvelle partie
    const confirmNewGameBtn = document.getElementById('confirm-new-game');
    const cancelNewGameBtn = document.getElementById('cancel-new-game');
    const newGuildNameInput = document.getElementById('new-guild-name');
    
    if (confirmNewGameBtn) {
        confirmNewGameBtn.addEventListener('click', () => {
            const guildName = newGuildNameInput ? newGuildNameInput.value.trim() : 'Guilde d\'Aventuriers';
            if (guildName) {
                gameState.newGame();
                gameState.updateGuildName(guildName);
                hideModal('new-game-modal');
                showScreen('game-screen');
                gameState.notificationManager.showNewGameCreated(guildName);
            } else {
                gameState.notificationManager.showInputError('Veuillez entrer un nom de guilde');
            }
        });
    }
    
    if (cancelNewGameBtn) {
        cancelNewGameBtn.addEventListener('click', () => {
            hideModal('new-game-modal');
        });
    }
    
    if (newGuildNameInput) {
        newGuildNameInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                confirmNewGameBtn.click();
            }
        });
    }
    
    // V√©rifier s'il y a une sauvegarde au d√©marrage
    if (gameState.saveManager.hasSave() && loadGameBtn) {
        loadGameBtn.textContent = 'Charger Partie ‚úì';
    }
    
    // √âv√©nement pour le bouton beta test
    const acceptBetaTestBtn = document.getElementById('accept-beta-test');
    if (acceptBetaTestBtn) {
        acceptBetaTestBtn.addEventListener('click', () => {
            hideModal('beta-test-modal');
            // Marquer que l'utilisateur a vu la modal beta test
            localStorage.setItem('betaTestSeen', 'true');
        });
    }
    
    // Gestionnaires d'√©v√©nements pour les contr√¥les de vitesse d'animation
    const speedButtons = document.querySelectorAll('.speed-btn');
    speedButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            const speed = parseInt(btn.getAttribute('data-speed'));
            gameState.animationManager.setAnimationSpeed(speed);
        });
    });
    
    console.log('Jeu initialis√© avec succ√®s');
}

// Styles CSS pour les animations
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(style);

// Initialiser le jeu quand la page est charg√©e
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM charg√©, initialisation du jeu...');
    try {
        initGame();
        console.log('Jeu initialis√© avec succ√®s');
    } catch (error) {
        console.error('Erreur lors de l\'initialisation:', error);
    }
}); 