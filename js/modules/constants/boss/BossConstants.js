// Boss disponibles

// Constantes pour les malus de boss
export const BOSS_MALUS_VALUES = {
    GOLEM_DAMAGE_REDUCTION: 50,    // -50% de d√©g√¢ts corps √† corps
    DRAGON_DAMAGE_REDUCTION: 30,   // -30% de d√©g√¢ts distance
    LICHE_DAMAGE_REDUCTION: 2,     // -2 d√©g√¢ts corps √† corps
    TITAN_MULTIPLIER_REDUCTION: 50, // -50% multiplicateurs (r√©duits de moiti√©)
    DEMON_DAMAGE_BONUS: 50         // +50% de d√©g√¢ts magiques
};

// Fonction pour obtenir le nom traduit d'un boss
export function getBossDisplayName(bossName) {
    const bossNames = {
        'Golem de Pierre': 'boss.stoneGolem',
        'Dragon de Glace': 'boss.iceDragon',
        'Liche': 'boss.liche',
        'Titan': 'boss.titan',
        'D√©mon': 'boss.demon',
        'Quilegan': 'boss.quilegan'
    };
    
    const translationKey = bossNames[bossName];
    return bossName;
}

// Fonction pour obtenir la m√©canique traduite d'un boss
export function getBossMechanic(bossName) {
    const bossMechanics = {
        'Golem de Pierre': 'boss.stoneGolemMechanic',
        'Dragon de Glace': 'boss.iceDragonMechanic',
        'Liche': 'boss.licheMechanic',
        'Titan': 'boss.titanMechanic',
        'D√©mon': 'boss.demonMechanic',
        'Quilegan': 'boss.quileganMechanic'
    };
    
    const translationKey = bossMechanics[bossName];
    return bossMechanics[bossName] || '';
}

export const BOSSES = [
    { name: 'Golem de Pierre', mechanic: 'Les unit√©s corps √† corps sont d√©sactiv√©es', targetDamage: 2500, icon: 'üóø' },
    { name: 'Dragon de Glace', mechanic: 'Les unit√©s distance sont d√©sactiv√©es', targetDamage: 4000, icon: '‚ùÑÔ∏è' },
    { name: 'Liche', mechanic: 'Les unit√©s physiques sont d√©sactiv√©es', targetDamage: 4500, icon: 'üíÄ' },
    { name: 'Titan', mechanic: 'Les multiplicateurs sont r√©duits de moiti√©', targetDamage: 3000, icon: 'üèîÔ∏è' },
    { name: 'D√©mon', mechanic: 'Les unit√©s magiques sont d√©sactiv√©es', targetDamage: 7500, icon: 'üëπ' },
    { name: 'El√©mentaire de feu', mechanic: 'Les unit√©s feu sont d√©sactiv√©es', targetDamage: 7500, icon: 'üî•' },
    { name: 'El√©mentaire d\'eau', mechanic: 'Les unit√©s eau sont d√©sactiv√©es', targetDamage: 7500, icon: 'üíß' },
    { name: 'El√©mentaire de terre', mechanic: 'Les unit√©s terre sont d√©sactiv√©es', targetDamage: 7500, icon: 'üåç' },
    { name: 'El√©mentaire d\'air', mechanic: 'Les unit√©s air sont d√©sactiv√©es', targetDamage: 7500, icon: 'üå¨Ô∏è' },
    { name: 'El√©mentaire de t√©n√®bres', mechanic: 'Les unit√©s t√©n√®bres sont d√©sactiv√©es', targetDamage: 7500, icon: 'üåë' },
    { name: 'El√©mentaire de lumi√®re', mechanic: 'Les unit√©s lumi√®re sont d√©sactiv√©es', targetDamage: 7500, icon: 'üåû' },
];

// Boss sp√©cifique pour le rang S
export const S_RANK_BOSS = {
    name: 'Quilegan',
    mechanic: 'Bloque les relances, les bonus, les synergies et les d√©g√¢ts des unit√©s tant qu\'aucun bonus n\'est vendu',
    targetDamage: 10000,
    icon: 'üåå'
};

// Fonction utilitaire pour s√©lectionner un boss al√©atoire
export function selectRandomBoss() {
    return BOSSES[Math.floor(Math.random() * BOSSES.length)];
}

// Fonction pour obtenir le boss selon le rang
export function getBossForRank(rank) {
    if (rank === 'S') {
        return S_RANK_BOSS; // Quilegan pour S
    } else {
        return selectRandomBoss();
    }
} 